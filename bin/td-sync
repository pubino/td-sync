#!/usr/bin/env bash
set -o errexit
set -o pipefail
IFS=$'\n\t'

print_help() {
  cat <<'EOF'
Tiny Data Sync - orchestrate recurring rsync jobs via Slurm

Usage: td-sync [--help]

Environment variables:
  TD_TEST_MODE            When set to 1 or true, use bundled mock commands for sbatch and mailer utilities.
  TD_CONFIG_DIR           Directory containing *.env configuration profiles (default: $HOME/.config/td-sync.d).
  TD_LOG_DIR              Directory to store log files (default: $PWD/logs).
  TD_LOG_RETENTION_DAYS   Number of days to retain log files before deletion.
  TD_HOME                 Overrides auto-detected project root; required only if script cannot determine its location.

Configuration profile (*.env) requirements:
  TD_SRC                  Source path for rsync.
  TD_DEST                 Destination path for rsync.
  TD_SUBMIT_INTERVAL      Slurm interval string (e.g., 3600, 7days).
  TD_SLURM_ACCOUNT        Slurm account name (defaults to profile basename when omitted).

Optional profile settings:
  TD_NOTIFY               Comma-separated recipient emails for notifications.
  TD_DRY_RUN              When 1/true, perform rsync dry-run.
  TD_SLURM_RUNTIME        HH:MM:SS job length (default: 01:00:00).

The script inspects all *.env profiles within TD_CONFIG_DIR, ensures each meets the minimum
requirements, generates a Slurm batch script per profile, and submits it. Submitted jobs
run rsync (dry-run when requested), store the results in TD_LOG_DIR, optionally send
notifications, and requeue themselves using TD_SUBMIT_INTERVAL to emulate a recurring schedule.
EOF
}

log_info() {
  printf '%s\n' "$*"
}

log_warn() {
  printf 'Warning: %s\n' "$*" >&2
}

log_error() {
  printf 'Error: %s\n' "$*" >&2
}

fatal() {
  log_error "$*"
  exit 1
}

is_truthy() {
  case "${1:-}" in
    1|true|TRUE|True) return 0 ;;
  esac
  return 1
}

resolve_td_home() {
  if [[ -n "${TD_HOME:-}" ]]; then
    printf '%s\n' "$TD_HOME"
    return 0
  fi

  local source="${BASH_SOURCE[0]}"
  if [[ -z "$source" ]]; then
    return 1
  fi

  while [[ -h "$source" ]]; do
    local dir
    dir=$(cd -P "$(dirname "$source")" && pwd) || return 1
    source=$(readlink "$source")
    [[ $source != /* ]] && source="$dir/$source"
  done

  local home
  home=$(cd -P "$(dirname "$source")/.." && pwd 2>/dev/null) || return 1
  printf '%s\n' "$home"
}

setup_test_mode() {
  if ! is_truthy "${TD_TEST_MODE:-}"; then
    return
  fi

  local mocks_dir="$TD_HOME/mocks/bin"
  if [[ -d "$mocks_dir" ]]; then
    PATH="$mocks_dir:$PATH"
    export PATH
    log_info "TD_TEST_MODE active - using mock commands from $mocks_dir"
  else
    log_warn "TD_TEST_MODE requested but mocks not found at $mocks_dir"
  fi
}

require_command() {
  local name="$1"
  if ! command -v "$name" >/dev/null 2>&1; then
    return 1
  fi
  return 0
}

find_mailer() {
  local candidate
  for candidate in mail mailx sendmail ssmtp; do
    if command -v "$candidate" >/dev/null 2>&1; then
      printf '%s\n' "$(command -v "$candidate")"
      return 0
    fi
  done
  return 1
}

purge_old_logs() {
  local dir="$1"
  local retention="${TD_LOG_RETENTION_DAYS:-}"
  if [[ -z "$retention" ]]; then
    return
  fi
  if ! [[ "$retention" =~ ^[0-9]+$ ]]; then
    log_warn "TD_LOG_RETENTION_DAYS must be numeric; skipping cleanup"
    return
  fi

  if [[ ! -d "$dir" ]]; then
    return
  fi

  find "$dir" -type f -name '*.log' -mtime "+$retention" -delete 2>/dev/null || true
}

load_profile() {
  local profile_path="$1"

  unset TD_SRC TD_DEST TD_SUBMIT_INTERVAL TD_SLURM_ACCOUNT TD_NOTIFY TD_DRY_RUN TD_SLURM_RUNTIME

  # shellcheck disable=SC1090
  source "$profile_path"
}

validate_profile() {
  local profile_name="$1"

  [[ -n "${TD_SRC:-}" ]] || { log_error "[$profile_name] TD_SRC is required"; return 1; }
  [[ -n "${TD_DEST:-}" ]] || { log_error "[$profile_name] TD_DEST is required"; return 1; }
  [[ -n "${TD_SUBMIT_INTERVAL:-}" ]] || { log_error "[$profile_name] TD_SUBMIT_INTERVAL is required"; return 1; }

  if [[ -z "${TD_SLURM_ACCOUNT:-}" ]]; then
    TD_SLURM_ACCOUNT="$profile_name"
  fi

  if ! [[ "$TD_SUBMIT_INTERVAL" =~ ^[0-9]+([[:alpha:]]+)?$ ]]; then
    log_error "[$profile_name] TD_SUBMIT_INTERVAL must be numeric seconds or a Slurm interval string"
    return 1
  fi

  if [[ -n "${TD_SLURM_RUNTIME:-}" ]]; then
    if ! [[ "$TD_SLURM_RUNTIME" =~ ^[0-9]{1,2}:[0-9]{2}:[0-9]{2}$ ]]; then
      log_error "[$profile_name] TD_SLURM_RUNTIME must be HH:MM:SS"
      return 1
    fi
  else
    TD_SLURM_RUNTIME="01:00:00"
  fi

  if [[ -n "${TD_NOTIFY:-}" ]]; then
    if [[ -z "$MAILER_CMD" ]]; then
      log_warn "[$profile_name] TD_NOTIFY set but no mailer available; notifications disabled"
    fi
  fi

  return 0
}

sanitize_name() {
  local input="$1"
  input="${input// /-}"
  input="${input//[^[:alnum:]_\-]/_}"
  printf '%s' "$input"
}

write_job_script() {
  local profile_label="$1"
  local sanitized_name="$2"
  local job_script_path="$3"
  local log_dir="$4"
  local mailer_cmd="$5"

  local dry_flag="0"
  if is_truthy "${TD_DRY_RUN:-}"; then
    dry_flag="1"
  fi

  local mailer_escaped
  local td_src_escaped
  local td_dest_escaped
  local td_notify_escaped
  local td_runtime_escaped
  local td_account_escaped
  local td_interval_escaped
  local log_dir_escaped
  local log_base_escaped
  local job_name_escaped
  local self_path_escaped

  printf -v mailer_escaped '%q' "$mailer_cmd"
  printf -v td_src_escaped '%q' "${TD_SRC:-}"
  printf -v td_dest_escaped '%q' "${TD_DEST:-}"
  printf -v td_notify_escaped '%q' "${TD_NOTIFY:-}"
  printf -v td_runtime_escaped '%q' "${TD_SLURM_RUNTIME:-}"
  printf -v td_account_escaped '%q' "${TD_SLURM_ACCOUNT:-}"
  printf -v td_interval_escaped '%q' "${TD_SUBMIT_INTERVAL:-}"
  printf -v log_dir_escaped '%q' "$log_dir"
  printf -v log_base_escaped '%q' "$profile_label"
  printf -v job_name_escaped '%q' "td-sync-$sanitized_name"
  printf -v self_path_escaped '%q' "$job_script_path"

  {
    printf '#!/usr/bin/env bash\n'
    printf 'set -euo pipefail\n\n'
    printf 'TD_SRC=%s\n' "$td_src_escaped"
    printf 'TD_DEST=%s\n' "$td_dest_escaped"
    printf 'TD_NOTIFY=%s\n' "$td_notify_escaped"
    printf 'TD_DRY_RUN=%s\n' "$dry_flag"
    printf 'TD_SLURM_RUNTIME=%s\n' "$td_runtime_escaped"
    printf 'TD_SLURM_ACCOUNT=%s\n' "$td_account_escaped"
    printf 'TD_SUBMIT_INTERVAL=%s\n' "$td_interval_escaped"
    printf 'TD_LOG_DIR=%s\n' "$log_dir_escaped"
  printf 'LOG_BASENAME=%s\n' "$log_base_escaped"
    printf 'MAILER_CMD=%s\n' "$mailer_escaped"
    printf 'JOB_NAME=%s\n' "$job_name_escaped"
    printf 'SELF_PATH=%s\n\n' "$self_path_escaped"
    cat <<'EOF'
mkdir -p "${TD_LOG_DIR}"

timestamp="$(date +"%Y%m%dT%H%M%S")"
log_file="${TD_LOG_DIR}/${LOG_BASENAME}_${timestamp}.log"

rsync_opts=("-av")
if [[ "$TD_DRY_RUN" == "1" ]]; then
  rsync_opts+=("--dry-run")
fi
rsync_opts+=("$TD_SRC" "$TD_DEST")

{
  printf 'Tiny Data Sync job: %s\n' "$JOB_NAME"
  printf 'Started: %s\n' "$timestamp"
  printf 'Source: %s\n' "$TD_SRC"
  printf 'Destination: %s\n' "$TD_DEST"
  printf 'Dry run: %s\n\n' "$TD_DRY_RUN"
  rsync "${rsync_opts[@]}"
} &>"$log_file"
rsync_status=$?

if [[ $rsync_status -ne 0 ]]; then
  printf 'rsync exited with status %s\n' "$rsync_status" >>"$log_file"
fi

if [[ -n "$TD_NOTIFY" && -n "$MAILER_CMD" ]]; then
  IFS=',' read -r -a recipients <<<"$TD_NOTIFY"
  for recipient in "${recipients[@]}"; do
    recipient="$(printf '%s' "$recipient" | xargs)"
    [[ -z "$recipient" ]] && continue
    if [[ "$MAILER_CMD" == *sendmail ]]; then
      {
        printf 'To: %s\n' "$recipient"
        printf 'Subject: Tiny Data Sync results for %s\n\n' "$JOB_NAME"
        cat "$log_file"
      } | "$MAILER_CMD" "$recipient"
    else
      "$MAILER_CMD" -s "Tiny Data Sync results for $JOB_NAME" "$recipient" <"$log_file"
    fi
  done
fi

if [[ -n "$TD_SUBMIT_INTERVAL" ]]; then
  if ! sbatch --job-name="$JOB_NAME" --time="$TD_SLURM_RUNTIME" --account="$TD_SLURM_ACCOUNT" --begin="+${TD_SUBMIT_INTERVAL}" "$SELF_PATH"; then
    printf 'Unable to requeue job with interval %s\n' "$TD_SUBMIT_INTERVAL" >>"$log_file"
    exit 1
  fi
fi
EOF
  } >"$job_script_path"

  chmod +x "$job_script_path"
}

submit_profile() {
  local profile_path="$1"
  local config_dir="$2"
  local log_dir="$3"

  local profile_filename
  profile_filename="$(basename "$profile_path")"
  local profile_name="${profile_filename%.env}"

  load_profile "$profile_path"
  validate_profile "$profile_name" || return 1

  local sanitized
  sanitized="$(sanitize_name "$profile_name")"
  local jobs_dir="$TD_HOME/jobs"
  mkdir -p "$jobs_dir"
  local job_script_path="$jobs_dir/$sanitized.job.sh"

  write_job_script "$profile_name" "$sanitized" "$job_script_path" "$log_dir" "$MAILER_CMD"

  local sbatch_args
  sbatch_args=("--job-name=td-sync-$sanitized" "--time=$TD_SLURM_RUNTIME" "--account=$TD_SLURM_ACCOUNT")

  log_info "Submitting profile $profile_name via $job_script_path"
  sbatch "${sbatch_args[@]}" "$job_script_path"
}

main() {
  if [[ ${1:-} == "--help" || ${1:-} == "-h" ]]; then
    print_help
    exit 0
  fi

  TD_HOME="$(resolve_td_home || true)"
  [[ -n "$TD_HOME" ]] || fatal "Unable to determine TD_HOME. Set TD_HOME and retry."

  setup_test_mode

  if ! require_command sbatch; then
    if is_truthy "${TD_TEST_MODE:-}"; then
      fatal "sbatch is required even in TD_TEST_MODE"
    else
      fatal "sbatch not found in PATH. Install Slurm or run in TD_TEST_MODE for testing."
    fi
  fi

  if ! require_command rsync; then
    if is_truthy "${TD_TEST_MODE:-}"; then
      log_warn "rsync not found; generated jobs will fail outside of test mode"
    else
      fatal "rsync command not found."
    fi
  fi

  MAILER_CMD="$(find_mailer || true)"
  if [[ -z "$MAILER_CMD" ]]; then
    log_warn "No mailer found (mail/mailx/sendmail); TD_NOTIFY settings will be ignored"
  fi

  local config_dir
  local config_from_env=0
  if [[ -v TD_CONFIG_DIR ]]; then
    config_dir="${TD_CONFIG_DIR}";
    config_from_env=1
  else
    config_dir="$HOME/.config/td-sync.d"
  fi

  if [[ -z "$config_dir" ]]; then
    fatal "TD_CONFIG_DIR cannot be empty"
  fi

  if [[ ! -d "$config_dir" ]]; then
    mkdir -p "$config_dir"
    if (( ! config_from_env )); then
      log_info "Created $config_dir but no configuration profiles were found."
    fi
  fi

  local log_dir
  if [[ -v TD_LOG_DIR ]]; then
    log_dir="$TD_LOG_DIR"
  else
    log_dir="$PWD/logs"
  fi

  if [[ -z "$log_dir" ]]; then
    fatal "TD_LOG_DIR cannot be empty"
  fi

  if [[ ! -d "$log_dir" ]]; then
    mkdir -p "$log_dir"
    log_info "Created log directory at $log_dir"
  fi

  purge_old_logs "$log_dir"

  shopt -s nullglob
  local profiles=("$config_dir"/*.env)
  shopt -u nullglob

  if (( ${#profiles[@]} == 0 )); then
    log_info "No configuration profiles found in $config_dir"
    exit 0
  fi

  local status=0
  local profile
  for profile in "${profiles[@]}"; do
    if ! submit_profile "$profile" "$config_dir" "$log_dir"; then
      status=1
    fi
  done

  exit $status
}

main "$@"
